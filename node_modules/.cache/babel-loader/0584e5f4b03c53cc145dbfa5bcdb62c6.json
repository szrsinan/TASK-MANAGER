{"ast":null,"code":"import { CREATE_TASK } from \"../actions/types\";\nimport { EDIT_TASK } from \"../actions/types\";\nconst initialState = [// {\n  //     id: 1,\n  //     title: \"Learn ReactJS\",\n  //     description: \"Let's learn React js today!\",\n  //     status: \"Completed\",\n  // }, \n  // {\n  //     id: 2,\n  //     title: \"Learn Redux\",\n  //     description: \"Let's learn Redux today!\",\n  //     status: \"In Progress\",\n  // },\n  // {\n  //     id: 3,\n  //     title: \"Learn MERN\",\n  //     description: \"Let's learn MERN this is my next step!\",\n  //     status: \"Unstarted\",\n  // }, \n];\n\nconst tasks = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    tasks: initialState\n  };\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  // if(action.type === EDIT_TASK) {\n  //     const {payload} = action;\n  //     return {\n  //         tasks: state.tasks.map((task) => {\n  //             if(task.id === payload.id) {\n  //                 return Object.assign({}, task, payload.params);\n  //             }\n  //             return task;\n  //         }),\n  //     };\n  // }\n  const {\n    payload\n  } = action;\n\n  switch (action.type) {\n    case EDIT_TASK:\n      {\n        return {\n          tasks: state.tasks.map(task => {\n            if (task.id === payload.id) {\n              return Object.assign({}, task, payload.params);\n            }\n\n            return task;\n          })\n        };\n      }\n\n    case CREATE_TASK:\n      {\n        return {\n          tasks: state.tasks.concat(action.payload)\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default tasks;","map":{"version":3,"sources":["/Users/simonsezar/Documents/projects/task-manager/src/reducers/index.js"],"names":["CREATE_TASK","EDIT_TASK","initialState","tasks","state","action","payload","type","map","task","id","Object","assign","params","concat"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAGA,MAAMC,YAAY,GAAG,CACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBiB,CAArB;;AAqBA,MAAMC,KAAK,GAAG,YAA2C;AAAA,MAA1CC,KAA0C,uEAAlC;AAACD,IAAAA,KAAK,EAAED;AAAR,GAAkC;AAAA,MAAXG,MAAW;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAK;AAACC,IAAAA;AAAD,MAAYD,MAAjB;;AACA,UAAOA,MAAM,CAACE,IAAd;AACI,SAAKN,SAAL;AAAiB;AACb,eAAO;AACHE,UAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYK,GAAZ,CAAiBC,IAAD,IAAU;AAC7B,gBAAGA,IAAI,CAACC,EAAL,KAAYJ,OAAO,CAACI,EAAvB,EAA2B;AACvB,qBAAOC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,IAAlB,EAAwBH,OAAO,CAACO,MAAhC,CAAP;AACH;;AACD,mBAAOJ,IAAP;AACH,WALM;AADJ,SAAP;AAQH;;AACD,SAAKT,WAAL;AAAkB;AACd,eAAM;AACFG,UAAAA,KAAK,EAAEC,KAAK,CAACD,KAAN,CAAYW,MAAZ,CAAmBT,MAAM,CAACC,OAA1B;AADL,SAAN;AAGH;;AAED;AACI,aAAOF,KAAP;AAlBR;AAoBH,CAlCD;;AAoCA,eAAeD,KAAf","sourcesContent":["import { CREATE_TASK } from \"../actions/types\";\nimport { EDIT_TASK } from \"../actions/types\";\n\n\nconst initialState = [\n    // {\n    //     id: 1,\n    //     title: \"Learn ReactJS\",\n    //     description: \"Let's learn React js today!\",\n    //     status: \"Completed\",\n    // }, \n    // {\n    //     id: 2,\n    //     title: \"Learn Redux\",\n    //     description: \"Let's learn Redux today!\",\n    //     status: \"In Progress\",\n    // },\n    // {\n    //     id: 3,\n    //     title: \"Learn MERN\",\n    //     description: \"Let's learn MERN this is my next step!\",\n    //     status: \"Unstarted\",\n    // }, \n];\n\nconst tasks = (state = {tasks: initialState}, action) => {\n    // if(action.type === EDIT_TASK) {\n    //     const {payload} = action;\n    //     return {\n    //         tasks: state.tasks.map((task) => {\n    //             if(task.id === payload.id) {\n    //                 return Object.assign({}, task, payload.params);\n    //             }\n    //             return task;\n    //         }),\n    //     };\n    // }\n    \n    const{payload} = action;\n    switch(action.type){\n        case EDIT_TASK : {\n            return {\n                tasks: state.tasks.map((task) => {\n                    if(task.id === payload.id) {\n                        return Object.assign({}, task, payload.params);\n                    }\n                    return task;\n                }),\n            };\n        }\n        case CREATE_TASK: {\n            return{\n                tasks: state.tasks.concat(action.payload)\n            };\n        }\n\n        default:\n            return state;\n    }\n};\n\nexport default tasks;"]},"metadata":{},"sourceType":"module"}